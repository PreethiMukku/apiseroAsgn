--------------Features of Java----------- 
->Platform Independent
  Java is Platform independent langauage as it uses jvm and jre environment and hence java programs can be run on any system.
 ->Multithreaded
  Multithreaded refers to handling multiple tasks simultaneously.Java supports multithreaded programs.
 ->Object-Oriented
  Object-oriented programming (OOPs) is a methodology that simplifies software development and maintenance by providing some rules.
 ->High-performance
  Java is faster than other traditional interpreted programming languages because Java bytecode is "close" to native code. 
 ->Dynamic
  Java is a dynamic language. It supports dynamic loading of classes. It means classes are loaded on demand.

-----------Inheritance----------
  ->Inheritance is the process by which objects of one class acquire the properties of objects of another class.
  ->The class which is inherted by other is known as 'parent class'and which inherites properties from other class is known as 'Sub class'.

----------Abstract class----------
  ->Abstract class in java is a class which is declared using abstract keyword.
  ->An abstract class cannot be instantiated.
  ->It can have abstract as well as non abstract methods.
  ->It can be inherited

-----------Final class/method/variable----------
    ->When  a class is declared with final keyword it is called final class.
    ->A final class cannot be inherited.
    ->Object of final class can be created.
    ->method that is final cannot be overrided.
    ->final variables are said to be constant and those cannot be changed in value.

---------------Interface--------- 
  ->An interface is similar to class.
  ->It is a collection of abstract methods.
  ->It helps to achieve multiple inheritance in java.

 ----------------Exception Handling--------
  ->Exception is handled in java using try catch block.
  ->Try statement is used to define a block of code to be tested for errors.
  ->Catch statement allows to define a block of code to be executed if any error occurs in try block.
  
 -------------Collection Framework----------
ArrayList
	->Collection of items
	->Duplicates excepted
	 ->Ordering/sorting(FCFS)
List<String> list = new ArrayList<>();
	list.add("AA");
	list.add("BB");
	list.remove(0);
	System.out.println(list);
	list.set(2,"NN");
	System.out.println(list);

HashSet 
	->Collection of items that uses a hash table for storage
	->No Duplicates excepted
	->Ordering/sorting OF Elements internally
        HashSet<String> cars = new HashSet<String>();
           cars.add("Volvo");
           cars.add("BMW");
           System.out.println(cars);
    
HashMap
	->Store items in key/value  pairs, and you can access them by an index of another type String.
	->No Duplicates excepted
        ->Ordering/sorting OF Elements internally
	HashMap<String, String> capitalCities = new HashMap<String, String>();
    		// Add keys and values (Country, City)
    		capitalCities.put("England", "London");
    		capitalCities.put("Germany", "Berlin");
    		capitalCities.put("Norway", "Oslo");
    		capitalCities.put("USA", "Washington DC");
    		System.out.println(capitalCities);
   
 --------------MultiThearding---------- 
 Multithreading in Java is a process of executing multiple threads simultaneously.
A thread is a lightweight sub-process, the smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.

Life Cycle of Thread
1) New
The thread is in new state if you create an instance of Thread class but before the invocation of start() method.
2) Runnable
The thread is in runnable state after invocation of start() method, but the thread scheduler has not selected it to be the running thread.
3) Running
The thread is in running state if the thread scheduler has selected it.
4) Non-Runnable (Blocked)
This is the state when the thread is still alive, but is currently not eligible to run.
5) Terminated
A thread is in terminated or dead state when its run() method exits.
