3/N tier architecture:

FOR MAKE MY TRIP:
presentation logic :(UI)
	-display menu or from where to where you want to go
	-(HTML/jsp in html form:-look of website and clientside validation)
business logic:
	-how to involk DIFFERENT API's and collect data( on clicking on show button will do what)
	-(javafile:what exactly to show when send a request to server)
persistant logic : 
	-database communication(store  for future reference and retrive info)-(when you select perticular flight interaction with  cards/payment gateway)

-----------------------------------------------
ALL TIERS AT:

1. SINGLE SERVER:
-if site have small code base
-less network calls needed
-when have less third party dependancy
-have less load

2.DISTRIBUTED (on many server):
-more code FOR APPLICATIN 
-more network calls 
-third party dependancy
-more load
-complexity increases

-Depending on complexity we can use single server or multiple servers.

------------------------------------------
SINGLE SERVER

DOWNTIME:
-when server dont reply(this site doesnt exit) in case of crash/server stop working.
-till we restart the server that downtime affect the business of website(loss).

-----------------------------------------
FAILOVER:
-to avoid downtime in case of server falis.
-add one more server which is copy of server1.(backup)
-so that in case server1 fails request to that website is given to server2
-advantage:
	-server 1 n 2 have same address.
-disadvantage:
	-wastage of resources
	-server2 is ideal for long time not 100 % use. 
	-slight downtime in switching to another server.
	-we are not checking it for long time whether it is working or not
--------------------------------------------------
LOADBALANCER:
-insted of taking one extra ideal server we cad add loadbalancer and use both the server active to share load with different address.
-loadbalancer will decide to which server request is send on round robin/random/weighted roundrobin.
-incase of failure of one server loadbalancer will send all request to another one.load balancer will get some notification abt whether server is running or not.
-so request for website goes to loadbalancer dns add.
-advantage:
	-100% use of both the server
-disadvantage:
	-incase of modification ,modify to both server(as servers are same copy ) so need of one common storage
	-but then that storage is "single point of failure".

--------------------------------------------	
CLUSTER:
-collection of server1+server2+server3 as one unity 
-deployment of application(modifying any file) on cluster rather than on single server.
-advantage:
	-incase of crash of one server user will not get any reply AS other servers in cluster are still working.

---------------------------------------------
MONOLITHS (Huge Application):
	- entire code is one unit therefor large codebase.
	- Single Code Base (Single Language -> known tools(java/eclipse/maven/junit)
		- deployment is simple	:-deployed on single server on one go.
		- Process of compilation / testing /debugging/ distributing -> same and simple
		- time taken is LONG as its a single code to deploy.
	-Unit + web testing


HUGE APPLICATION CONVERTED to MICROSERVICES:

	- Multiple Code Bases (Choice of lang/tool is available instade of using one lang)
	- Deployment /compilation is difficult - its different for each service and also lang. is different
	- Time 
  -Unit(tested using postman(as you are giving each module as service)/locally) + web testing(UI)
	-same as monoliths but need to check current network OVERHEAD.
  -even if u have tested only 2 microservice u can perform integration testing.

-------------------------------------------------------------------
PRODUCTIVITY AND COMPLEXITY:

-https://martinfowler.com/bliki/MicroservicePremium.html
-DEPEnding on above diagram we get following observation:

-FOR HUGE APP:
	-AS complexity(no of codeline,people deal with,external calls to make) increases productivity falls as imposible to manage it.
	-EX:-if new member joins he have to go through all thing and he takes long time to understand only which intern productivity falls.
	-more overhead compare to their advantages.

-FOR MICROSERVICES
	- Increases productivity if COMPLEXITY is high for system BUT FOR SMALL APP it will not give any advantage for productivity.

-----------------------------------------------------------------
Micro Services Concerns and Deployment:

	-break huge system into small modules as if its independent service.
	-each module is service called microservice.(for each service one server)
	-each service have to communicate to other service
	-for this concerns are data sharing,more network communication so consider overhead,enable to consider loose coupling.
	-developing microservice is simpler(for developer). architectecting person will have tough task.
	
	-Advantages:
		-we can use different tehnology for different microservices.
		-Distribution of work performed parallel: development and deployment with different skill set(multiple codebase-java,php,perl)
		-modification of module is easy as it is seperate.
		-addition of new functionality from design perspective is easy.
		-scaling of services.
		-When front end service send request to backend service(not up) and  it doesnot send data but sends the error then it is same as monoliths but if it display the cached data (it hide that microservice is not UP)then it gives advantages.(As they can be on different servers no single point of failure)
		-small codebase as divided into microservices :it is easy for new member of team to analyze n cope up with work.
		-clear boundries.
		-tracking become easier

	-Disadvantage:
		-more resources required FOR MANAGEMENT like cpu.
		-testing is not easy When consider huge application having many microservices as have to test each microservice.
		-higher number of remote calls as many services involved.
		-microservices have "multiple codebases" therefor deployed(compiled) independently according to their specification (java,nodejs) need different enviorment(everytime its different).
		-as you have to design different services and then integrate them,first level of implementation may take time .
		-security issues arise across the modules.

CHECK PPT:https://qconsf.com/sf2014/system/files/presentation-slides/QConSF-MicroServices-IPC-Netflix-Sudhir-2014.pptx
---------------------------------------------------------------------

google provide microservices :-where to  keep data for Microservices on:
EX: Google
- Goole Drive
- Google Email
- Google forms
	-Google account -> Accept username, password -> check validity
         - Share email address/unique
perform 2 Levels of microservice:
- its Individual responce Data passed only to one Microservice when used is Forms.
- Shared data between All microservices EX: Account details

----------------------------------------------------------------------
 
SCALABILITY:
- Even in case of increased/decreased load your system HAS TO BE AVAILABLE WITH MAINTAINING THE PERFORMANCE.
	-Ex: Whatsapp download/upload of messages SHOULD take same time/MAINTAIN PERFORMANCE even if the number of users using it are increased.
  -we can link scalability to machine capacity .
