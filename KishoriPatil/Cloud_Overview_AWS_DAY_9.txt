CLOUD COMPUTING:
-> delivery of ON DEMAND computing services from applicaton to storage and processing power typicallyon internet on pay as you go basis.
-> firms can avoid the upfront cost and complexity of owing and aintaining its own infrastructure.and istead they can pay for what they use and when they use.

-> characteristics:
	*on demand service :
		-consumer themself performs all the actions needed to get those services without any human interaction.
		-these services they get when they want.
	*resource pooling :
		-it allows location independant resource pooling .it have many resources stored which can be used at any time.
	*broad access network :
		-these services can be accessed from many devices.
	*measured services : 
		-consumer have to pay only for those services that he is using and also the time for which they are using inshort provide meterbased service.
	*Rapid elasticity :
		-provide scaleup ir scale-down facility.
	*Multi Tenacity :
		-multiple customers of a cloud vendor are using the same computing resources.
		-They share resources still aren't aware of each other, and their data is kept totally separate.
	examples: Gmail,amazon web services,google cloud platform.

SERVICES PROVIDED

->Infrastructure As Service
->Platform As Service
->Software As Service

INFRASTRUCTURE AS SERVICE:

->PROVIDE networking,storage,servers,virtualization,OS as service
->you can select the OS  
->user manages:
	-Application
	-Data
	-Runtime
	-Middleware(lang like java,nodeJS)
	-OS (you can select but manages by service provider)
-EX : 
	-Microsoft Azure
	-Google Compute Engine
	-Amazon EC2 :- In this user have to download MYSQL installables,install it,configure it.

PLATFORM AS SERVICE

-> PROVIDE networking,storage,servers,virtualization,OS ,middleware,runtime as service
-> i.e provide entire application development enviorment.
-> User manages :
	-> Application
	-> Data
-> EX :
	-> online compilers 
	-> AWS RDS:- MYSQL is already installed and configured

SOFTWARE AS SERVICE

-> PROVIDE networking,storage,servers,virtualization,OS ,middleware,runtime, Application,Data as service
-> User manages : nothing
-> user can only those services.
-> installing software is still easy but maintaining it is worry therefor this service will give this freedom as vender will maintain that software for you.
-> EX : 
	-google apps/Gsuit
	-zoom,Cisco webx
	-office 365

-for apisero.com/ FABINDIA.COM  using google mail box
		IAAS -unix server and install
		PAAS -Iaas + install mail server
		SAAS - (Iaas + Paas + Software) customization and just start using it

AMAZON WEB SERVICES :

->AWS is a provide services on cloud
->responsibility segregation principle mostly implemented

AMAZON'S ELASTIC COMPUTE CLOUD (EC2) :
 
	->provide Infrastructure as service
	->provide networking,storage,servers,virtualization,OS as service 
	->user manages:
		-Application
		-Data
		-Runtime
		-Middleware(lang like java,nodeJS)
		-OS (you can select but manages by service provider)


->User by itsown can create instances( virtual servers) depending on their requirement and can configure as follow


AUTO SCALING :

	->Helps you to reintialize the instance if your instance get killed or crashed.	
	->AutoScailing is good when load is known.

	->SCALE-UP : 
		Add instances/servers upto maximum capacity depending upon condition specified and requirement.
		
	->SCALE-DOWN :
		-> Decrease in instance/servers upto Desired /minimum capacity depending upon condition specified and requirement..
	->STEP-SCALING :
		-Add all Machine together

	->SIMPLE-SCALING :
		->add machine step by step i.e one by one  when you need to scaleup 

	->EX:
		->desired value=1 ,Maximum value=1, Minimum value=1
			->autoscaling automatically start the new instance when your actual server is crashed

		->desired value=1 ,Maximum value=5, Minimum value=1
			->Automatically start/remove other instance(server) depending on mentioned condition for network-in(-10000 request/network-In),network-out,ect
			->But if there are no load balancer then those instances are only created/deleted but cant use them.

LOAD BALANCER:
	->If we are using more than one server then load balancer is used in EC2 which basically distribute the load to both the servers.
	->EC2 Balancing server load equally using round robin algorithm
	-> Each microservice can have seperate loadbalance

->Practically its good to use( SERVER +LOAD BALANCER +AUTI-SCALING TOGETHER)
->SO that instances which are initialized by autoscaling in case of heavy traffic/mentioned condition those can actually be used for load distribution by load balancer.

->DNS Mapping Can also be done by AWS to hide the approach(LIKE sUSAGE OF LOAD BALANCER /SERVER CHANGED) from the end user. 

->Developmet server
	-Used to develop,test and deploy the projects by the developer.

->Production server
	-Used by the admin to deploy the project from development server at the end.