
Day 3, Day 4   -  OOP(Core Java)	

+Eclipse
Java Fundamentals – Quick View

JAVA a platform independent language
⦁	a separate file is created for a compiled program. 
⦁	This file (.class) is called bytecode which cannot be executed directly. 
⦁	It does not include executable codes. 
⦁	Instead it will be converted into executable code by JAVA VIRTUAL MACHINE.
⦁	Byte code generated in a particular platform can be executed in any other platform. 
⦁	compiler send the generated bytecodes to the JVM and this JVM converts the byte codes into machine code which is readable by a particular machine.
⦁	JRE on many platform.

Every class extend object class.

PACKAGE
⦁	grouping of classes.
⦁	must be mapped to folder hierarchy.
⦁	you need to import these packages.
⦁	Ex: java.lang ,java.sql


 ACCESS MODIFIER
              SAME CLASS      SAME PACKAGE              DIFF PACKAGE
                           SUCLASS  NON-SUBCLASS   SUCLASS  NON-SUBCLASS
-DEFAULT        YES          YES       YES            NO          NO
-PRIVATE        YES          NO        YES            NO          NO         
-PROTECTED      YES          YES       YES            YES         NO
-PUBLIC         YES          YES       YES            YES         YES


⦁	filename and main class name has to be same when your class is public.
⦁	when we have more than 1 class in .java file and we perform javac that time all classes get their .class file seperately.
⦁	to execute those classes you need to write different commands for each class(java a.java)
⦁	javac -s. calc.java---for source file
⦁	javac -d.calc.java----crete folder first then .java(destination).
⦁	need to map package name to directory structure


DATATYPES
Primitive and non-primitive.

VARIABLES
holds the value while the Java program is executed.

LOCAL: (belongs to method)
declared inside the body of the method .
SCOPE is only within that method

 INSTANCE: (belongs to instance)
⦁	declared inside the class but outside the body of the method
⦁	value is instance specific and is not shared among instances.
⦁	ex: int a=6;

 STATIC: (belongs to class)
⦁	create a single copy of static variable and share among all the instances of the class. 
⦁	Memory allocation for static variable happens only once when the class is loaded in the memory.
⦁	ex: static int a=4;

ARRAY
⦁	collection of data with same datatype .
⦁	After creation, its length is fixed.
⦁	if  array of object then default is NULL as stores reference address.
declaration and memory allocation
        int[] a = new int[10];
initialize and printing element
        a[0] = 100;
Sop("Element at index 0: "+ a[0]);

java doesn't use pass by  reference

INHERITANCE
	ABSTRACT
Class:    -Can't instantiated
	-Use when u want inheritance +STATIC
	-No restriction to have abstract method.
	-Can contain common n abstract and final methods
Method:  -No body in super class
	     -extending class need to define this method
	     -if abstract methode is their then the class has to be abstract
	
	FINAL
Class:- to avoid -->base class can overide the methods in superclass.
	-No change ONLY USE.
	-can't be parent class
Method:-can't override this methode.

	interface
-one interface can be implemented by many classes.
-can create object of class with interface reference
-no data variables,actual methodes
-only abstract methods
-EX:
interface M{
  public void m1();   // interface method (does not have a body)
}
class P implements M{
  public void m1()
    System.out.println("Zzz");
  }}
class MainClass {
  public static void main(String[] args) {
    P p =  new P();
M P= new P();
  } }
 
⦁	abstract contains data members where as interface don't
⦁	cant OVERRIDE by return type.
⦁	can overload methods by giving different parameters.
⦁	Exception handling: use try catch block.

Collection API (List, Set, Map)
ARRAYLIST
⦁	Collection of items
⦁	Duplicates excepted
⦁	 Ordering/sorting(FCFS)
List<String> list = new ArrayList<>();
	list.add("AA");
	list.remove(1);
	System.out.println(list);
	list.set(1,"22222222222");
	System.out.println(list);

HashSet 
⦁	Collection of items that uses a hash table for storage
⦁	No Duplicates excepted
⦁	Ordering/sorting OF Elements internally
Set<Integer> l2  = new HashSet<>();
	l2.add(11);// convert int to Integer -> Boxing 
	System.out.println("hashset:   "+l1);

HashMap
⦁	Store items in key/value  pairs, and you can access them by an index of another type String ).
⦁	No Duplicates excepted
⦁	Ordering/sorting OF Elements internally
Map<String,Integer> map =new TreeMap<>();
		map.put("Sima", 60);
				System.out.println(map);
		System.out.println("Marks for Lina = " + map.get("Lina"));

    Threads
Multithreading is a Java feature that allows concurrent execution of two or more parts of a program
class A implements Runnable
 public void run()  //override this
   {
	}
	LifeCycle
⦁	class overrides the run() method available in the Thread class.
⦁	 A thread begins its life inside run() method. 
⦁	We create an object of our new class and call start() method to start the execution of a thread..
	Start
 Start() invokes the run() method on the Thread object which is overloaded in class.
	join
join the start of a thread’s execution to end of other thread’s execution such that a thread does not start running until another thread ends
	sleep
 Causes the currently executing thread to sleep(stop executing ) for the specified number of milliseconds


