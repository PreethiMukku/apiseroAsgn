Application Development
 Types of Clients
 	Rich Clients:
		1. Applications are completely dependent on client side.
		2. RAM/Processing/Storage used from client side.
		3. Not dependent on server.
		4. Different Installables required depending on the OS.
	Thin Clients:
		1. Dependency on server, no client side expectations.
		2. Overload on server.
		3. No Platform dependency.
		4. Applications and transactions may be slower due to the overhead on server 		side.
	RIA:
		1. Requires processing and storage from server side.
		2. Client requires network to use the application.
		3. Asynchronous requests are sent to reduce the overhead on server, and to 			
    give faster transaction speed to the user.
	Mobile Applications:
		1. Dependent on Client(RAM/Storage/Processing).
		2. Offline Applications are not dependent on server and Online Applications 			
    are dependent on server for data.
		3. Different Installables required depending on the OS.
    
Different Orientations
	Procedure Oriented:
		1. A set of instructions is performed in a sequence and each instruction has a 			
    specific task to be done.
		2. Data is not secured, global variables can be modified by any function. Easy 			
    access to the data.
		3. Focus is done on process rather than data.
		eg. C
	Object Oriented:
		1. Data is secured, it is bounded by methods. Data can be accessed only 			
    through methods(getters/setters).
		eg. Java
	Component Oriented:
		1. All required features are bundled as components into the software and 			
    given to the client. Remains as one time investment where the entire 			
    software is purchased at once.
		eg. Tally ERP
	Service Oriented:
		1. Sofware features are used on service basis. Works on pay per usage model.
		2. All SaaS applications. eg. Gsuite, Zoho products. 
    
Different Types of Languages
	Compiled:
		1. Entire code is compiled at once and then executed.
		eg. C
	Scripting:
		1. Code is interpreted, each instruction is executed one by one. 
		eg. Python
    
Application Changes
	Fast modifications:
		1. Depending on the situations and scenario the applications need to be 			
    added or modified with new features to sustain in the market.
		eg. After demonetization, all the businesses started adding the e-payment 			
    module immediately. 
	Common code with multiple Interfaces:
		1. When the application is using resources or data from third party 				
    applications, the response from each third party application may change. So 			
    will have to always look for their compatability and easy integration. 
	Need of Integration with different applications:
		1. As the application scales, there are new features to be added or giving 			
    multiple options for a single transaction(e-payment) for the customers. So 			
    different applications are intergrated into the system, as per the customer 			
    needs and market changes.    
