DevOps -> Development + Operations

- When there was monolith applications, there was each phase one after other so making it easy. And since there was one codebase and the environment was same, 
the deployment was easy.
- Development->Deployment->Testing
- In Micro services, if suppose there are 20 micro services there would be 20 different environment. So we need to have a different deployment strategy.
- Now we go for end-to-end development. (Development+Deployment)

Business Agility:
- Time-to-Market Acceleration.
- Experimentation
- Rapid Prototyping 
- Flexible Partnering
- IoT/IoS Support

- Collaboration: For connecting with team.
- Issue Tracking: For issue priority and visibility.
- Source Control.

- There is always wall of confusion between developers and deployers. 
- Developers want changes into the application and deployers want stability. To remove this wall of confusion we use devops.

Advantages of devops:
- To Reduce the implementation time of new services.
- Increase productivity
- Save costs on maintenance and upgrades
- Standardize processes for easy replication and faster delivery
- Improve quality, reliability and reusability of all system components-
- Increase the rate of success for digitalization strategies and transformation projects

Software Development Lifecycle:
Waterfall Model:
- We had Waterfall model, which was a phase wise model one after other. 
- This was more time consuming, and we finding bug and changing some feature in the software was very much difficult. G
- Going back to the previous phase for fixing bugs or for changes very difficult.
 
When we go for waterfall model:
- Requirements are not changing frequently
- Application is not complicated and big
- Project is short
- Requirement is clear
- Environment is stable
- Technology and tools used are not dynamic and is stable
- Resources are available and trained

V-model:
- V Model is a highly disciplined SDLC model in which there is a testing phase parallel to each development phase. 
- The V model is an extension of the waterfall model in which testing is done on each stage parallel with development in a sequential way. 
- It is known as the Validation or Verification Model.

Agile Methodology: 
Agile Manifesto:
- Individuals and interactions over processes and tools
- Working software over comprehensive documentation
- Customer collaboration over contract negotiation
- Responding to change over following a plan

Agile Principles: 
Our highest priority is to satisfy the customer
through early and continuous delivery
of valuable software.

Welcome changing requirements, even late in
development. Agile processes harness change for
the customer's competitive advantage.

Deliver working software frequently, from a
couple of weeks to a couple of months, with a
preference to the shorter timescale.

Business people and developers must work
together daily throughout the project.

Build projects around motivated individuals.
Give them the environment and support they need,
and trust them to get the job done.

The most efficient and effective method of
conveying information to and within a development
team is face-to-face conversation.

Working software is the primary measure of progress.

Agile processes promote sustainable development.
The sponsors, developers, and users should be able
to maintain a constant pace indefinitely.

Continuous attention to technical excellence
and good design enhances agility.

Simplicity--the art of maximizing the amount
of work not done--is essential.

The best architectures, requirements, and designs
emerge from self-organizing teams.

At regular intervals, the team reflects on how
to become more effective, then tunes and adjusts
its behavior accordingly.

When to go for agile:
- Project is large and complex
- Project is prone to changes
- When client is not fixed about project requirements
- When we want to give working deliverables at shorter intervals

When not to go for agile:
- When project is small
- All the specifications are well known in advance
- Faster delivery of complete project
- Customer does not want to get involved in the development process.

UAT:
- User Acceptance Testing (UAT) is done by the end user to verify/accept the software and check if all the requirements is been satisfied before moving the software application to the production environment. 
- UAT is done in the final phase of testing after functional, integration and system testing is done. 
- UAT is done not to find the defects but to make sure all the requirements is been fulfilled.

Jira:
- Jira is used for issue tracking and managing the issues with in a project.
- We can have a team, were an individual can raise issue/bugs/errors and assign it to someone in the team to solve it.
- Further the assignee can also sub assign the task.
- Once the bug is solved it is closed and notified to the user.
