Mutlitier
- Client–server architecture
- Distributed network

=>Presentation layer - UI
=>Business Logic layer - blogic, API
=>Database layer - db connection for access and manuplation

- we can change any layer implementaion as and when needed to business needs
- easy to scale


Ex-> Makemytrip,cleartrip


FailOver
- if i have 2 serves , s1 handles all incomming requests
- iff s1 is down then s2 is used in that case
- then s2 is down then we say its FAILOVER
- I'm not sure about DNS updation thing while server's fail

LoadBalancer
- distribution of load
- to have single point of entry
- multiple servers 
- needs to deploy in all servers if there is 
- better compared to single one

Cluster
- same info 
- various machines 
- similar to master-client
- changes will be reflected in all machines 


--------------------------------------------------------Mono->Micro
Supporting Arguments
- Easy to maintain and scale
Ex ------ we all know that the number of people searching for cabs is more comparatively more than the people 
actually booking a cab and making payments. This gets us an inference that the number of processes working on the passenger
 management microservice is more than the number of processes working on payments.
- Loosely coupled components
- Changes in specific module needs to redeployed in that specific module only
Ex ------ If you want to change anything in the billing Microservices, then you just have to deploy only billing Microservices and don’t have to deploy the others.
- If a service is down still rest of the services are up


Oppose
- Redoing the most of the code
- Lenghty process and resource comsuming
- Entire code needs to be tested
- Lots of security measures to be taken care of at each service
- Sometimes cross language support might be difficult
