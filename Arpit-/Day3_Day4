Java Fundamentals:

 Java is a Object Oriented programming language which can be both compiled and interpreted, used to develop Standalone applications and Web applets.
 
 Execution in Java program involves two steps:
	- Compiling source code into Bytecode using javac comp - javac FILENAME.java(syntax)
	- Executing the Bytecode program using Java interpreter - java FILENAME(syntax)

  Some of the other important features of Java are
 - Robust and Secure
 - Distributed Language 
- Simple and Small
- Multithreaded 
 - Object Oriented
 - Platform independent
 - Dynamic
 -High performance

Naming Conventions:
	- Classes and Interfaces:-
		Class names should be nouns, in mixed case with the first letter of each internal word capitalised.Class Name cannot be a Keyword.
                 Interfaces name should also be capitalised just like class names.
		  
	- Methods:-
		Methods should be verbs, in mixed case with the first letter lowercase and with the first letter of each internal word capitalised.
			
	- Variables:-
		Variable names should be short and understandable. Variables can also start with either underscore(‘_’) or dollar sign ‘$’ characters.
		One character variables are not a best practice except in the case of temporary variables.
		Constant variables are given in upper case with use of undersocre to separate words
		
Java Library:

	The Java standard library (or API) includes hundreds of classes and methods grouped into several functional packages.
	We have to import these into our class to use these library classes and methods.
	Ex:- Language Support Package - java.language (default package)
		 Utilities Package - java.util
				 
Some important definitions in java:
  Main method:-
	It's  the execution point of every program ,after the execution of main method the program gets terminated normally.
		
Primitive data types:
	
	The Java programming language is statically-typed, which means that all variables must first be declared before they can be used.
	Different types of primitive data types include:-
		byte(0), short(0), int(0), long(0L), float(0.0f), double(0.0d), boolean(false), char('\u0000'). 
		
Non-Primitive/Derived:-

	Classes, Interfaces, Arrays,String.
	

Keywords:
	
	They implement specific features of the languages. Java has reserved 60 words as keywords. Since keywords have specific meaning, we can not use them as names for variables.
		Ex:- abstract, boolean, byte, case, catch, char, class, static, super,......
	
	Using of Abstract class:

	- Abstract class cannot be instantiated.
	- The abstract methods of an abstract class must be defined in its subclass.
	- We can have constructors for abstract classes.
		
		abstract class Shape
		{
			………………….
			………………….
			abstract void draw ( );
			…………………
			…………………
		}
		
Access Modifiers:

	- Public: Accessible to all packages.
	- Protected: Accessible to same class and sub classes in different or same package.
	- Private: Accessible only to the Same class.
         - Default - Accessible to same class ,other class , derived class but must be in the same package.
			  
Exception Handling:
	
	This is used to put the necessary statements which we know may cause error in try block and add a catch block which throws the exception of that particular statement.
	It's of Throwable type .
	try
	{
		statements; 
	}
	catch(Exception-type e)
	{
	statements; 
	}
	
Arrays:

	- An array is a container object that holds a fixed number of values of a single type. The length of an array is declared at the time of creation.
	- The length of the array is fixed, and can't be changed at runtime.
	- It’s very fast to access any elements in an array, the time taken to access both first element and last element in an array is same.
	- An array of primitives stores values of the primitives.
	- An array of objects stores only the references to the objects.
	- Lenght of an array is given by using the fucntion arrayName.lenght, it returns a integer value.
	
Wrapper Class:

	Primitive data types must be converted into object types by using wrapper classes contained in java.lang package.
	Below are the simple data types and their corresponding wrapper class types:
		boolean - Boolean
		char - Character
		double - Double
		float - Float
		int - Integer
		long - Long
		
Collections:

	A Collection is a collection of similar adn desimilar type of object.
	
	List:-
		This interface is dedicated to the data of the list type in which we can store all the ordered collection of the objects.
		
		Ex:- 
		List <T> al = new ArrayList<> ();
		 List <T> ll = new LinkedList<> ();
		Where T is the type of the object
			 
	Set:-
		A set is an unordered collection of objects in which duplicate values cannot be stored.
		
		Ex:- 
		Set<Q> hs = new HashSet<> ();
		 Set<Q> lhs = new LinkedHashSet<> ();
		 Set<Q> ts = new TreeSet<> ();
		 Where Q is the type of the object.
			 
	Map:-
		A map is a data structure which supports the key-value pair mapping for the data.
		
		Ex:- 
		Map<R> hm = new HashMap<> ();
		 Map<R> tm = new TreeMap<> ();
		 Map<R> sm = new SortedMap<> ();
	       Where R is the type of the object.
