=>What is RDBMS?
RDBMS stands for Relational Database Management System. RDBMS is the basis for SQL, and for all modern database systems like MS SQL Server, IBM DB2, Oracle, MySQL, and     Microsoft Access.A Relational database management system (RDBMS) is a database management system (DBMS) that is based on the relational model as introduced by E. F. Codd


what SQL ?
SQL databases are table based databases
Have predefined schema
Are vertically scalable
Use SQL (Structured Query Language) for defining and manipulating the data
A good fit for the complex query intensive environment
Emphasize ACID properties (Atomicity, Consistency, Isolation, and Durability)
Examples include: MySQL, Oracle, Sqlite, Postgres, and MS-SQL 


=>what is NoSQL ?
NoSQL databases are document-based, key-value pairs, and graph databases
Have dynamic schema
Are horizontally scalable
Focused on the collection of documents
Not ideal for complex queries
Follow the Brewers CAP theorem (Consistency, Availability, and Partition tolerance)
Examples include: MongoDB, BigTable, Redis, RavenDb, Neo4j, and CouchDb


=>Database − A database is a collection of tables, with related data.
=>Table − A table is a matrix with data. A table in a database looks like a simple spreadsheet.
=>Column − One column (data element) contains data of one and the same kind, for example the column postcode.
=>Row − A row (= tuple, entry or record) is a group of related data, for example the data of one subscription.
=>Redundancy − Storing data twice, redundantly to make the system faster.
=>Primary Key − A primary key is unique. A key value can not occur twice in one table. With a key, you can only find one row.
=>Foreign Key − A foreign key is the linking pin between two tables.
=>Compound Key − A compound key (composite key) is a key that consists of multiple columns, because one column is not sufficiently unique.
=>Referential Integrity − Referential Integrity makes sure that a foreign key value always points to an existing row.


=>Understanding SQL Constraints.
“Constraints” are basically rules that are used to govern how the columns on a table function. They are used to limit the kind of data that you’ll find within the table. This will ensure reliability and accuracy for the data that is being entered in the database. Let’s take a look at some of the more commonly used SQL constraints that you’ll encounter:
1.NOT NULL: This constraint is used to ensure that all columns within your database don’t contain a “NULL” value.
2.DEFAULT:  Used to provide some kind of default value whenever there isn’t one specified in a column.
3.UNIQUE:   Designed to ensure that every single value in a column is unique.
4.PRIMARY:  These refer to the rows and records in a table that have been uniquely identified.
5.CHECK:    Designed to ensure that all values within a specific column meet the conditions for the database as a whole.


=>DML (Data Manipulation Language) Commands in MySQL
Data Manipulation Language (DML) statements or commands are used for managing data within tables. Some commands of DML are:
Some commands of DML are:
SELECT – retrieve data from the a database
INSERT – insert data into a table
UPDATE – updates existing data within a table
DELETE – deletes all records from a table, the space for the records remain
MERGE – UPSERT operation (insert or update)
CALL – call a PL/SQL or Java subprogram
LOCK TABLE – control concurrency


=>DDL(Data Definition Language) : DDL or Data Definition Language actually consists of the SQL commands that can be used to define the database schema. It simply deals with descriptions of the database schema and is used to create and modify the structure of database objects in the database.
Examples of DDL commands:
CREATE – is used to create the database or its objects (like table, index, function, views, store procedure and triggers).
DROP – is used to delete objects from the database.
ALTER-is used to alter the structure of the database.
TRUNCATE–is used to remove all records from a table, including all spaces allocated for the records are removed.
COMMENT –is used to add comments to the data dictionary.
RENAME –is used to rename an object existing in the database.


=>Types of Entity Relationships in DBMS
1.One-to-One Relationship
Under One-to-One (1:1) relationship, an instance of entity P is related to instance of entity Q and an instance of entity Q is related to instance of entity P.
Example − 
A person can have only one passport, and a passport is assigned to a single person.

2.One-to-Many Relationship
Under One-to-Many (1:N) relationship, an instance of entity P is related to more than one instance of entity Q and an instance of entity Q is related to more than one instance of entity P.
Example −
A Person can have more than one Bank Accounts but a bank account can have at most one person as account holder

3.Many-to-Many Relationship
Under Many-to-Many (N:N) relationship, more than one instance of entity P is related to more than one instance of entity Q. For more than one instance of entity Q is related to more than one instance of entity P.
Example −
A person can have more than one skills. More than one person can attain a skill


=>JOINS IN SQL
1.INNER JOIN
INNER JOIN: The INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies. This keyword will create the result-set by combining all rows from both the tables where the condition satisfies i.e value of the common field will be same.
Syntax:
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
INNER JOIN table2
ON table1.matching_column = table2.matching_column;

table1: First table.
table2: Second table
matching_column: Column common to both the tables.

2.LEFT JOIN
 This join returns all the rows of the table on the left side of the join and matching rows for the table on the right side of join. The rows for which there is no matching row on right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.Syntax:
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
LEFT JOIN table2
ON table1.matching_column = table2.matching_column;
table1: First table.
table2: Second table
matching_column: Column common to both the tables.

3.RIGHT JOIN
RIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of join. The rows for which there is no matching row on left side, the result-set will contain null. RIGHT JOIN is also known as RIGHT OUTER JOIN.Syntax:
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
RIGHT JOIN table2
ON table1.matching_column = table2.matching_column;
table1: First table.
table2: Second table
matching_column: Column common to both the tables.

4.FULL JOIN
FULL JOIN creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both the tables. The rows for which there is no matching, the result-set will contain NULL values.Syntax:
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
FULL JOIN table2
ON table1.matching_column = table2.matching_column;
table1: First table.
table2: Second table
matching_column: Column common to both the tables.

=>SQL | Aliases
Aliases are the temporary names given to table or column for the purpose of a particular SQL query. It is used when name of column or table is used other than their original names, but the modified name is only temporary.

Aliases are created to make table or column names more readable.
The renaming is just a temporary change and table name does not change in the original database.
Aliases are useful when table or column names are big or not very readable.
These are preferred when there are more than one table involved in a query.
Basic Syntax:

For column alias:
SELECT column as alias_name FROM table_name;
column: fields in the table
alias_name: temporary alias name to be used in replacement of original column name 
table_name: name of table


=>SQL | INSERT INTO Statement
The INSERT INTO statement of SQL is used to insert a new row in a table. There are two ways of using INSERT INTO statement for inserting rows:

Only values: First method is to specify only the value of data to be inserted without the column names.
INSERT INTO table_name VALUES (value1, value2, value3,…);
table_name: name of the table.
value1, value2,.. : value of first column, second column,… for the new record

Column names and values both: In the second method we will specify both the columns which we want to fill and their corresponding values as shown below:
INSERT INTO table_name (column1, column2, column3,..) VALUES ( value1, value2, value3,..);
table_name: name of the table.
column1: name of first column, second column …
value1, value2, value3 : value of first column, second column,… for the new record


=>SQL | DELETE Statement
The DELETE Statement in SQL is used to delete existing records from a table. We can delete a single record or multiple records depending on the condition we specify in the WHERE clause.
Basic Syntax:

DELETE FROM table_name WHERE some_condition;

table_name: name of the table
some_condition: condition to choose particular record.

=>SQL | ORDER BY
The ORDER BY statement in sql is used to sort the fetched data in either ascending or descending according to one or more columns.

By default ORDER BY sorts the data in ascending order.
We can use the keyword DESC to sort the data in descending order and the keyword ASC to sort in ascending order.
Syntax of all ways of using ORDER BY is shown below:

Sort according to one column: To sort in ascending or descending order we can use the keywords ASC or DESC respectively.
Syntax:
SELECT * FROM table_name ORDER BY column_name ASC|DESC

table_name: name of the table.
column_name: name of the column according to which the data is needed to be arranged.
ASC: to sort the data in ascending order.
DESC: to sort the data in descending order.

=>SQL | DROP, TRUNCATE
DROP
DROP is used to delete a whole database or just a table.The DROP statement destroys the objects like an existing database, table, index, or view.
A DROP statement in SQL removes a component from a relational database management system (RDBMS).
Syntax:

DROP object object_name

Examples:
DROP TABLE table_name;


=>TRUNCATE

TRUNCATE statement is a Data Definition Language (DDL) operation that is used to mark the extents of a table for deallocation (empty for reuse). The result of this operation quickly removes all data from a table, typically bypassing a number of integrity enforcing mechanisms. It was officially introduced in the SQL:2008 standard.
The TRUNCATE TABLE mytable statement is logically (though not physically) equivalent to the DELETE FROM mytable statement (without a WHERE clause).
Syntax:

TRUNCATE TABLE  table_name;
table_name: Name of the table to be truncated.
DATABASE name - student_data

