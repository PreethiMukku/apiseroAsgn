A)Types of Applications:----
1)Rich Client Application (Thick Client).
--In rich client application Installation must be done on the end users machine.
--It does not depend on any type of network.
--To update application Its tough.
--We have to privide .exe file for running application on client side and the exe file can be easily decoded and missuse of code may happen.
--We relay on the type of operating sysytem.
--Tighty coupled approach is there etc...

2)Thin Client 
--Brower + Network Both are Required (must).
--No need to install any application on client side device .
--Code files are on the server that why code safety is advantage in this type of applications.
--No need to worry about the client Operating System it work same and seamlessly .
--Simple to handle for Versonablity and maintainablility.
--It follow a Round trip to responce and request from client machine to server.

3)Rich client Application (RIA)
--It is a intermediate solution from rich client to thin client application.
--All the Mordern Application follow Rich client architecture design to develop applications.
--Rich client applications download data in the Cache memory.
--Ex: Gmail,Google search Engine etc.
--90% times javascript runs in backgound, for reach and every request there is a responce back but without realoding the page.
--AJAX (Asyncromous javascript and XML) in taken in use too achive this.
--Mobile applications like paytm, uber, google pay which use the api fall under this category.


B)Different Orientations of Languages:----
1.Prodedure oriented
--ex:C,Pascal
--Code is compiled as wholesome  and follow a procedure too.
2.Object Oriented
--ex:C++, core java
--Data should be hidden is main priority
3.Component Oriented 
--Combination of classes and interfaces
--ex:ActiveX,RMI,EJB,Cobra
4.Service Oriented
--Everything is loosly coupled and used as a service only 
--ex: payment gateway, Searchengine


C)Programming Fundamentals:----
1.Class
--. A Class is like an object constructor, or a "blueprint" for creating objects.
2.Object
-- Its just an instance or class
3.Encapsulation:
--In Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit.
--Declare the variables of a class as private. Provide public setter and getter methods to modify and view the variables values
4.Abstraction
--Data abstraction is the process of hiding certain details and showing only essential information to the user. 
--Abstraction can be achieved with either abstract classes or interfaces
5.Polymorphism
--Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent
class reference is used to refer to a child class object. 
--Any Java object that can pass more than one IS-A test is considered to be polymorphic
6.Inheritance
--Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
--The idea behind inheritance in Java is that you can create new classes that are built upon existing classes.
--When you inherit from an existing class, you can reuse methods and fields of the parent class.
--Inheritance is more likely to be use when there are common data members 
--For code reuse instance can revoke the Methods.
7.Note:----
    i)Interface :
    --We use intrfaces in Polymorphism when we want show only specific data of mentohd to outer world.
    ii)Java supports Multiple inheritance using Interfaces.
    iii)Inheritance breaks  Encapsulation
    
    





