
Abstract class

	- for inheritance .. for static 
	- can contain normal and abstract methods as well
	- cannot create instance of tht class
abstract method ..its class should be abstract.


  final keyword.
	-cannot be derived, cannot override its methods
	-can create instance of class
 cannot create instance of an interface
 suppose we implement a interface in a class the methods of interface will get implmented not of class.
 implement interface - write code for implement methods

exception handling:
	-try catch block
	-try .. the exceptions
	-catch .. the program thaht we want to execute
	-finally.. always runs with or without any exception.


collection framework:
	-store data and for standardization
	-list:collection of items, mo unique check , no ordering ( based on adiition)

list is an Interface.
array list, linked list
list: follows insertion order
hash set :  follows no insertion order, hashing order.. for huge amount of data
no duplication in set


tree set : no duplication, ascending order *** for less amount of data to be implemented


map inerface:
	-map.put(key value pairs)
		
  for searching value 
	-map.get("key")
Map<String,Integer> map =new TreeMap<>();
		map.put("Sima", 60);
		map.put("Lina", 44);
		map.put("Meena", 78);
		System.out.println(map);
		map.put("Lina",444);
		map.put("meena",222);
		System.out.println(map);

		System.out.println("Marks for Lina = " + map.get("Lina"));



THREADS:
Pre-Defined class by java. Used for multitasking simultaneously.


Collections...

A collection — sometimes called a container — is simply an object that groups multiple elements into a single unit. 
	Collections are used to store, retrieve, manipulate, and communicate aggregate data. Typically, they represent data items that form a natural group, 
	such as a poker hand (a collection of cards), a mail folder (a collection of letters), or a telephone directory (a mapping of names to phone numbers). 
	If you have used the Java programming language — or just about any other programming language — you are already familiar with collections.
What Is a Collections Framework?
	A collections framework is a unified architecture for representing and manipulating collections. All collections frameworks contain the following:
Interfaces
	These are abstract data types that represent collections. Interfaces allow collections to be manipulated independently of the details of their representation.
	In object-oriented languages, interfaces generally form a hierarchy.
Implementations 
	These are the concrete implementations of the collection interfaces. In essence, they are reusable data structures.
Algorithms
	These are the methods that perform useful computations, such as searching and sorting, on objects that implement collection interfaces.
	The algorithms are said to be polymorphic: 
	that is, the same method can be used on many different implementations of the appropriate collection interface.
	In essence, algorithms are reusable functionality.

Framework breaks with this tradition, as you will learn for yourself in this chapter.
Benefits of the Java Collections Framework
The Java Collections Framework provides the following benefits:
	-Reduces programming effort: By providing useful data structures and algorithms, the Collections Framework frees you to concentrate on the important parts of your program rather
	than on the low-level "plumbing" required to make it work. By facilitating interoperability among unrelated APIs, the Java Collections Framework frees you from writing adapter
	objects or conversion code to connect APIs.
	-Increases program speed and quality: This Collections Framework provides high-performance, high-quality implementations of useful data structures and algorithms. 
	The various implementations of each interface are interchangeable, so programs can be easily tuned by switching collection implementations. 
	Because you're freed from the drudgery of writing your own data structures, you'll have more time to devote to improving programs' quality and performance.
	-Allows interoperability among unrelated APIs: The collection interfaces are the vernacular by which APIs pass collections back and forth. If my network administration 
	API furnishes a collection of node names and if your GUI toolkit expects a collection of column headings, our APIs will interoperate seamlessly, even though they were written
	independently.
	-Reduces effort to learn and to use new APIs: Many APIs naturally take collections on input and furnish them as output. In the past, each such API had a small sub-API devoted
	to manipulating its collections. There was little consistency among these ad hoc collections sub-APIs, so you had to learn each one from scratch, and it was easy to make
	mistakes when using them. With the advent of standard collection interfaces, the problem went away.
	-Reduces effort to design new APIs: This is the flip side of the previous advantage. Designers and implementers don't have to reinvent the wheel each time they create an 
API that relies on collections, instead, they can use standard collection interfaces.
	Fosters software reuse- New data structures that conform to the standard collection interfaces are by nature reusable. The same goes for new algorithms that operate on 
	objects that implement these interfaces.
