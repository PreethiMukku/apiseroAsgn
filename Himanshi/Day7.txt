	# Day 6 : Application development -Eclipse,Github,Maven
	• GitHub :
		- If suppose today  java changes math.random .It will create havoc as most of our func are dependent on them.
		So,we need a procedure.
		- Breaking change : when some new change has been done and your project cant run.(project build).
		- Therefore ,you cant change anything on your own.
		- Procedure : 
			- checkout (take code out from main code ) only one particular method .In this time,noone can interfere this method.
			- Modify-->compile..
			- Check in code ---> build the project.
							- Succesfful : no need to worry.
							- Fails : create a version 2.0 
			(dev 1 : checkout code snippet-permission to modify->grant permisison.
			Dev 2 : want to checkout same code snippet -- permisison - failes - b=as dev1 is modigying it )
			Dev1 : modifies code and submit it on server that is check in.
			Dev1 : now he build the project i. e commit  and see if.)
		- I will have all the log of who has taken which code snippet,who has modified it and when he has modifies it.
		- Version control - for code safety.
		- But mostyl , developer declare any method as depreceated instead of stop astehir will be many method which will depend on stop hence w ecant delete this stop method but don’t use it probably as it may end any time.
		- Version control systems are a category of software tools that helps record changes to files by keeping a track of modifications done to the code.
		- Use of Version Control System:
			• A repository: It can be thought as a database of changes. It contains all the edits and historical versions (snapshots) of the project
			• Copy of Work (sometimes called as checkout): It is the personal copy of all the files in a project. You can edit to this copy, without affecting the work of others and you can finally commit your changes to a repository when you are done making your changes.
		- Types of Version Control Systems:
			• Local Version Control Systems
			• Centralized Version Control Systems
			• Distributed Version Control Systems
		Local Version Control Systems: It is one of the simplest forms and has a database that kept all the changes to files under revision control. RCS is one of the most common VCS tools. It keeps patch sets (differences between files) in a special format on disk. By adding up all the patches it can then re-create what any file looked like at any point in time.
		Centralized Version Control Systems: Centralized version control systems contain just one repository and each user gets their own working copy. You need to commit to reflecting your changes in the repository. It is possible for others to see your changes by updating.
		Two things are required to make your changes visible to others which are:
			• You commit
			• They update
		Distributed Version Control Systems: Distributed version control systems contain multiple repositories. Each user has their own repository and working copy. Just committing your changes will not give others access to your changes. This is because commit will reflect those changes in your local repository and you need to push them in order to make them visible on the central repository. Similarly, When you update, you do not get other’s changes unless you have first pulled those changes into your repository.
		To make your changes visible to others, 4 things are required:
			• You commit
			• You push
			• They pull
			• They update
		The most popular distributed version control systems are Git, Mercurial. They help us overcome the problem of single point of failur.
		- Purposeof Version Control:
			• Multiple people can work simultaneously on a single project. Everyone works on and edits their own copy of the files and it is up to them when they wish to share the changes made by them with the rest of the team.
			• It also enables one person to use multiple computers to work on a project, so it is valuable even if you are working by yourself.
			• It integrates the work that is done simultaneously by different members of the team. In some rare case, when conflicting edits are made by two people to the same line of a file, then human assistance is requested by the version control system in deciding what should be done.
			• Version control provides access to the historical versions of a project. This is insurance against computer crashes or data loss. If any mistake is made, you can easily roll back to a previous version. It is also possible to undo specific edits that too without losing the work done in the meanwhile. It can be easily known when, why, and by whom any part of a file was edited.
		- Example : Github : we will have all version /changes retained in history.
		- Install git - deafult settings 
			- Init - make deafult empty repository.
			- .git folder whillkeep track of allt he changes(show hidden )
			- Git pull <location+branch>   
			- To comit  : git commit -a -m first   FOR msg/ccomment.
			- Git push <remitename(location) 
		
		- https://github.com/jainhimanshi/Apisero
		- Make your local folder path    C:\work\git
		- Now on this path - give git init
		- Now do git pull you url master
		- Modify changes locally.
		- Now do git commit -a -m first commit
		- Now as I have to sent it  to remote so ,
				Git remote add mynm urlofrepos// fot setting the path
		- Now push ,     git push  --set-upstream mynm master
		- Do authentication- username,password
		
	• With clone ,I will n=be making a complete copy even confgi file and everything 
	Byt with pull ,I am just  copying content. And we can use git push .
		- If you are gonna always talk to one dire ,use clone.
		- Git clone https://github.com/jainhimanshi/Apisero
		- Modify files
		- Git commit -a -m message
		- Git push
	
	• Branching:
		- Wheny ou don’t want to udate yout misn file.
		- So you update  the branch file and make changes in branch and merge layeter.


	• Maven 
	• Tool :  complete unit for dependency mngmt section.
		- Dependency mngmnt
		- Flow of actions
	• Install ->extract ->(works with jdk only) ->setpath to your bin forlder of maven
	--> w=now write mvn and check-----> shouldgave a build failure
	• Instread do it in eclipse
		- New project - maven project-->group name -->artificat id (hierachy)
		- Go to project -->right click -->run as --> maven build-->cleanin goals
		- -->maven --goals--compile-->set jdk in windown tab in unstaklled jre and set it  --->run as goals-->compile-->success
		- Clean-compile-package---------it will clean,compileand make all file into jar file .This jar file can be easily pushed to git.
		- I am only shring the jar file(target classes) and not the source code .
		- If I want to share code ----> source code share otherwise only generated artifacts.
		- If youn need anot extra reposirty ,just uinclude dependency in pon.xml file of that reositruy from internet.
		- Dependency on the pom file.
		- All the dependency should be downloaded.
		- Basic goals defined :  clean-->install--compile-->package(heir isno need to explicitly compile,package will bydefault do)
		- I have thin file ---directory to check dependency will be pom file
		- Pom will serach for jar files.
		- Maven repositroy---.m2--> user.
		- Thick jar ---> all the dependency on .m2 section.



